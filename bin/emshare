#!/usr/bin/env rust-script
//! ```cargo
//! [dependencies]
//! clap = { version = "4.0", features = ["derive"] }
//! globset = "0.4"
//! ```
use clap::Parser;
use std::collections::HashMap;
use std::path::{Path, PathBuf};
use std::process::Command;
use globset::{Glob, GlobSetBuilder};

/// Command-line arguments structure
#[derive(Parser)]
struct Args {
    /// Include patterns (e.g., "*.py"), can be specified multiple times
    #[clap(long, action = clap::ArgAction::Append)]
    include: Vec<String>,

    /// Exclude patterns (e.g., "*.md"), can be specified multiple times
    #[clap(long, action = clap::ArgAction::Append)]
    exclude: Vec<String>,
}

/// Represents a node in the directory tree
enum TreeNode {
    Directory(HashMap<String, TreeNode>),
    File,
}

impl TreeNode {
    /// Creates a new directory node
    fn new_dir() -> Self {
        TreeNode::Directory(HashMap::new())
    }
}

/// Gets the root directory of the Git repository
fn get_git_root() -> Result<String, String> {
    let output = Command::new("git")
        .args(["rev-parse", "--show-toplevel"])
        .output()
        .map_err(|e| format!("Failed to run git: {}", e))?;

    if output.status.success() {
        let root = String::from_utf8(output.stdout)
            .map_err(|e| format!("Invalid UTF-8: {}", e))?
            .trim()
            .to_string();
        Ok(root)
    } else {
        Err("Not a Git repository".to_string())
    }
}

/// Gets the list of tracked files from Git
fn get_tracked_files() -> Result<Vec<String>, String> {
    let output = Command::new("git")
        .arg("ls-files")
        .output()
        .map_err(|e| format!("Failed to run git ls-files: {}", e))?;

    if output.status.success() {
        let files = String::from_utf8(output.stdout)
            .map_err(|e| format!("Invalid UTF-8: {}", e))?
            .lines()
            .map(|s| s.to_string())
            .collect();
        Ok(files)
    } else {
        Err("Failed to get tracked files".to_string())
    }
}

/// Builds a directory tree from a list of file paths
fn build_tree(files: &[String]) -> TreeNode {
    let mut root = TreeNode::new_dir();
    for file in files {
        let parts: Vec<&str> = file.split('/').collect();
        let mut current = &mut root;
        for (i, part) in parts.iter().enumerate() {
            if i == parts.len() - 1 {
                if let TreeNode::Directory(map) = current {
                    map.insert(part.to_string(), TreeNode::File);
                }
            } else {
                if let TreeNode::Directory(map) = current {
                    current = map.entry(part.to_string()).or_insert_with(TreeNode::new_dir);
                }
            }
        }
    }
    root
}

/// Prints the directory tree as a list of formatted strings
fn print_tree(node: &TreeNode, prefix: &str) -> Vec<String> {
    let mut lines = Vec::new();
    if let TreeNode::Directory(map) = node {
        let mut items: Vec<&String> = map.keys().collect();
        items.sort();
        for (i, item) in items.iter().enumerate() {
            let is_last = i == items.len() - 1;
            let line_prefix = if is_last { "└── " } else { "├── " };
            lines.push(format!("{}{}{}", prefix, line_prefix, item));
            let extension = if is_last { "    " } else { "│   " };
            let child_lines = print_tree(&map[*item], &(prefix.to_string() + extension));
            lines.extend(child_lines);
        }
    }
    lines
}

fn main() {
    // Parse command-line arguments
    let args = Args::parse();

    // Get repository root and current working directory
    let root = get_git_root().expect("Failed to get Git root");
    let cwd = std::env::current_dir().expect("Failed to get current directory");
    let root_path = PathBuf::from(&root);

    // Compute the relative path from root to cwd
    let cwd_rel = cwd.strip_prefix(&root_path).unwrap_or(Path::new(""));
    let cwd_rel_str = cwd_rel.to_str().unwrap();
    let cwd_prefix = if cwd_rel_str.is_empty() {
        "".to_string()
    } else {
        format!("{}/", cwd_rel_str)
    };

    // Adjust include and exclude patterns with cwd prefix
    let include_patterns: Vec<String> = args
        .include
        .iter()
        .map(|pat| format!("{}{}", cwd_prefix, pat))
        .collect();
    let exclude_patterns: Vec<String> = args
        .exclude
        .iter()
        .map(|pat| format!("{}{}", cwd_prefix, pat))
        .collect();

    // Get tracked files and convert to paths relative to root
    let tracked_files = get_tracked_files().expect("Failed to get tracked files");
    let root_rel_files: Vec<String> = tracked_files
        .iter()
        .map(|file| {
            let abs_path = cwd.join(file);
            let rel_path = abs_path.strip_prefix(&root_path).unwrap();
            rel_path.to_str().unwrap().to_string()
        })
        .collect();

    // Build include and exclude GlobSets
    let include_set = if include_patterns.is_empty() {
        None
    } else {
        let mut builder = GlobSetBuilder::new();
        for pat in &include_patterns {
            builder.add(Glob::new(pat).unwrap());
        }
        Some(builder.build().unwrap())
    };
    let exclude_set = {
        let mut builder = GlobSetBuilder::new();
        for pat in &exclude_patterns {
            builder.add(Glob::new(pat).unwrap());
        }
        builder.build().unwrap()
    };

    // Filter files based on patterns
    let filtered_files: Vec<String> = root_rel_files
        .into_iter()
        .filter(|file| {
            let include_match = include_set.as_ref().map_or(true, |set| set.is_match(file));
            let exclude_match = exclude_set.is_match(file);
            include_match && !exclude_match
        })
        .collect();

    // Build and print the directory structure
    let tree = build_tree(&filtered_files);
    println!("## Directory Structure\n");
    println!("```\n.");
    let tree_lines = print_tree(&tree, "");
    for line in tree_lines {
        println!("{}", line);
    }
    println!("```\n");

    // Print each file's content
    for file in &filtered_files {
        println!("## File: {}\n", file);
        println!("```\n");
        let file_path = root_path.join(file);
        match std::fs::read_to_string(&file_path) {
            Ok(content) => println!("{}", content),
            Err(e) if e.kind() == std::io::ErrorKind::InvalidData => {
                println!("(binary file, content not included)");
            }
            Err(e) => {
                println!("(error reading file: {})", e);
            }
        }
        println!("```\n");
    }
}
